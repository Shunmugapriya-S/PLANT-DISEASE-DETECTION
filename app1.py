import streamlit as st
import numpy as np
from PIL import Image
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import pyttsx3
from twilio.rest import Client
from gtts import gTTS
import os
import playsound
from dotenv import load_dotenv   # тЬЕ dotenv for credentials

# тЬЕ Load environment variables
load_dotenv('.env')
account_sid = os.getenv("TWILIO_ACCOUNT_SID")
auth_token = os.getenv("TWILIO_AUTH_TOKEN")
twilio_number = os.getenv("TWILIO_PHONE_NUMBER")
recipient_number = os.getenv("RECIPIENT_PHONE_NUMBER")

# тЬЕ Streamlit Page Config
st.set_page_config(page_title="Plant Disease Detector", layout="centered")

# тЬЕ Load Model
@st.cache_resource
def load_trained_model():
    return load_model("plant_disease_model.h5")

model = load_trained_model()

# тЬЕ Class Labels
class_names = [
    "Pepper_bell_Bacterial_spot", "Pepperbell__healthy",
    "Potato__Early_blight", "Potato_Late_blight", "Potato__healthy",
    "Tomato__Bacterial_spot", "Tomato_Early_blight", "Tomato__Late_blight",
    "Tomato__Leaf_Mold", "Tomato__Septoria_leaf_spot",
    "Tomato__Spider_mites_Two_spotted_spider_mite", "Tomato__Target_Spot",
    "Tomato__Tomato_Yellow_Leaf_Curl_Virus", "Tomato_Tomato_mosaic_virus", "Tomato__healthy"
]

# тЬЕ Remedies - English
remedies = {
    "Bacterial": "тЮб Avoid overhead watering.\nтЮб Remove infected leaves.\nтЮб Apply copper-based bactericides.",
    "Fungal": "тЮб Ensure proper drainage.\nтЮб Apply recommended fungicides.\nтЮб Avoid crowding of plants.",
    "Viral": "тЮб Remove and destroy infected plants.\nтЮб Control insect vectors.\nтЮб Avoid planting near infected crops.",
    "Healthy": "тЬЕ Plant is healthy. Keep monitoring regularly."
}

# тЬЕ Remedies - Tamil
remedies_tamil = {
    "Pepper_bell_Bacterial_spot": "роЗроирпНродродрпН родро╛ро╡ро░родрпНродро┐ро▓рпН рокро╛роХрпНроЯрпАро░ро┐ропро╛ ро╕рпНрокро╛роЯрпН роирпЛропрпН роЙро│рпНро│родрпБ...",
    "Tomato_Early_blight": "роЗроирпНродродрпН родро╛ро╡ро░родрпНродро┐ро▓рпН роЖро░роорпНрок роиро┐ро▓рпИ рокро┐ро│рпИроЯрпН роирпЛропрпН роЙро│рпНро│родрпБ...",
    "Tomato_Late_blight": "родро╛рооро░рпИропро┐ро▓рпН родро╛роород рокро┐ро│рпИроЯрпН роирпЛропрпН роЙро│рпНро│родрпБ...",
    "Tomato_Leaf_Mold": "роЗро▓рпИроорпВроЯро┐ роирпЛропрпН роЙро│рпНро│родрпБ...",
    "Tomato_Septoria_leaf_spot": "роЪрпЖрокрпНроЯрпЛро░ро┐ропро╛ роЗро▓рпИ ро╕рпНрокро╛роЯрпН роЙро│рпНро│родрпБ...",
    "Tomato_Spider_mites_Two_spotted_spider_mite": "роЗродрпБ роЗро░рогрпНроЯрпБ рокрпБро│рпНро│ро┐роХро│рпН роХрпКрогрпНроЯ роЪро┐ро▓роирпНродро┐рокрпН рокрпВроЪрпНроЪро┐ родрпКро▒рпНро▒ро╛роХрпБроорпН...",
    "Tomato_Target_Spot": "роЯро╛ро░рпНроХрпЖроЯрпН ро╕рпНрокро╛роЯрпН роирпЛропрпН роЙро│рпНро│родрпБ...",
    "Tomato_Tomato_Yellow_Leaf_Curl_Virus": "роЗродрпБ ро╡рпИро░ро╕рпН роирпЛропрпН...",
    "Tomato_Tomato_mosaic_virus": "роорпКроЪрпИроХрпН ро╡рпИро░ро╕рпН роЙро│рпНро│родрпБ...",
    "Tomato__healthy": "роЗроирпНродродрпН родро╛ро╡ро░роорпН роЖро░рпЛроХрпНроХро┐ропрооро╛роХ роЙро│рпНро│родрпБ..."
}

# тЬЕ Disease type mapper
disease_type_map = {
    "Bacterial_spot": "Bacterial",
    "Leaf_Mold": "Fungal",
    "Early_blight": "Fungal",
    "Late_blight": "Fungal",
    "Septoria_leaf_spot": "Fungal",
    "Target_Spot": "Fungal",
    "Tomato_mosaic_virus": "Viral",
    "Tomato_Yellow_Leaf_Curl_Virus": "Viral",
    "healthy": "Healthy"
}

# тЬЕ Tamil voice support
def speak_tamil(text):
    try:
        engine = pyttsx3.init()
        voices = engine.getProperty('voices')
        for voice in voices:
            if "ta" in voice.id.lower() or "tamil" in voice.name.lower():
                engine.setProperty('voice', voice.id)
                break
        engine.say(text)
        engine.runAndWait()
    except:
        try:
            tts = gTTS(text=text, lang='ta')
            tts.save("remedy_tamil.mp3")
            playsound.playsound("remedy_tamil.mp3")
            os.remove("remedy_tamil.mp3")
        except:
            st.warning("ЁЯФЗ Could not play Tamil voice message.")

# тЬЕ UI
st.title("ЁЯМ┐ Plant Disease Detection App")
st.markdown("Upload a plant leaf image. The app will predict the disease and suggest remedies.")

uploaded_file = st.file_uploader("ЁЯУд Upload a Leaf Image", type=["jpg", "jpeg", "png"])

if uploaded_file:
    img = Image.open(uploaded_file).convert("RGB")
    st.image(img, caption="ЁЯЦ╝ Uploaded Image", use_column_width=True)

    img_resized = img.resize((224, 224))
    img_array = image.img_to_array(img_resized)
    img_array = np.expand_dims(img_array, axis=0) / 255.0

    with st.spinner("ЁЯФН Predicting..."):
        prediction = model.predict(img_array)
        predicted_idx = np.argmax(prediction)
        predicted_label = class_names[predicted_idx]
        confidence = np.max(prediction) * 100

    disease_key = predicted_label.split("_")[-1]
    disease_type = disease_type_map.get(disease_key, "Unknown")

    # тЬЕ Remedy selection with fallback
    if disease_type in remedies:
        suggestion = remedies[disease_type]
    else:
        suggestion = remedies_tamil.get(predicted_label, "тЬЕ родро╛ро╡ро░роорпН роЖро░рпЛроХрпНроХро┐ропрооро╛роХ роЗро░рпБроХрпНроХро▓ро╛роорпН. роорпЗро▓рпБроорпН роХро╡ройро┐роХрпНроХро╡рпБроорпН.")

    # тЬЕ Display results
    st.success(f"ЁЯМ▒ Disease Detected: *{predicted_label}*")
    st.info(f"ЁЯУК Confidence: *{confidence:.2f}%*")
    st.warning(f"ЁЯзк Type: *{disease_type}*")
    st.markdown(f"ЁЯТб *Suggested Remedy:*\n\n{suggestion}")

    # тЬЕ English voice
    try:
        engine = pyttsx3.init()
        engine.say(f"Disease detected is {predicted_label}. Confidence is {confidence:.2f} percent.")
        engine.runAndWait()
    except:
        st.warning("ЁЯФЗ English voice alert failed.")

    # тЬЕ Tamil voice
    tamil_remedy = remedies_tamil.get(predicted_label, "родроХро╡ро▓рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.")
    speak_tamil(tamil_remedy)

    # тЬЕ Tamil SMS via Twilio
    try:
        if account_sid and auth_token and twilio_number and recipient_number:
            client = Client(account_sid, auth_token)
            tamil_msg = f"""ЁЯМ┐ роирпЛропрпН роХрогрпНроЯро▒ро┐ропрокрпНрокроЯрпНроЯродрпБ: {predicted_label}
роироорпНрокро┐роХрпНроХрпИ: {confidence:.2f}%
ро╡ро┐родро┐роХро│рпН:
{tamil_remedy}"""

            client.messages.create(
                body=tamil_msg,
                from_=twilio_number,
                to=recipient_number
            )
            st.success("тЬЕ Message sent successfully")
        else:
            st.error("тЪая╕П Twilio credentials not found in environment variables.")
    except Exception as e:
        st.error(f"тЪая╕П Message not sent: {e}")
